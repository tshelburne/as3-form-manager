package dls.signals {		import org.osflash.signals.ISignal;	import org.osflash.signals.Signal;		import dls.signals.ISignalRelay;		/**	 * @author Tim Shelburne, (c)2012 No rights reserved	 * From: http://www.dontlookstudios.com	 * Contact:  tim@dontlookstudios.com	 * 	 * An implementation of ISignalRelay which allows for relaying a single dispatch	 * from any number of signal sources. This is particularly useful in instances 	 * you may be receiving messages from an array of indefinite length of objects	 * dispatching signals (eg. a list of form components)	 */	public class MultisignalRelay extends Signal implements ISignalRelay {				/*=========================================================*		 * PROPERTIES		 *=========================================================*/		 		private var _signals:Vector.<ISignal> = new <ISignal>[];				private var _isLive:Boolean = true;				/*=========================================================*		 * FUNCTIONS		 *=========================================================*/		 		public function MultisignalRelay(signals:Vector.<ISignal> = null) {			if (signals != null) {				_signals = signals;			}			initRelay();		}				/**		 * initiates the dispatch listener on all signals		 */		public function initRelay():void {			_isLive = true;						for each (var signal:ISignal in _signals) {				signal.add(signalDispatched);			}		}				/**		 * kills the listener for all signals 		 */		public function killRelay():void {			_isLive = false;						for each (var signal:ISignal in _signals) {				signal.remove(signalDispatched);			}		}				/**		 * adds a signal to the list		 */		public function addSignal(signal:ISignal):void {			_signals.push(signal);			if (_isLive) {				signal.add(signalDispatched);			}		}				/**		 * forwards the dispatched information on to any listeners of the relay		 *		 * @param - a placeholder argument to allow sending messages with NativeSignals because ...rest isn't counted as an argument		 * @param - a catch for all argument passed to the listener		 */		private function signalDispatched(arg1:* = null, ...rest):void {			rest.unshift(arg1);			this.dispatch.apply(this, rest);		}	}	}