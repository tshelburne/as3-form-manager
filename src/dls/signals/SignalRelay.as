package dls.signals {		import org.osflash.signals.ISignal;	import org.osflash.signals.Signal;		/**	 * @author Tim Shelburne, (c)2012 No rights reserved	 * From: http://www.dontlookstudios.com	 * Contact:  tim@dontlookstudios.com	 * 	 * An implementation of ISignalRelay which automatically relays a	 * single signal. This is particularly helpful when an inner component	 * of some object is updated, and that signal needs to propagate 	 * all the way upward, without exposing the inner components publicly.	 */	public class SignalRelay extends Signal implements ISignalRelay {				/*=========================================================*		 * PROPERTIES		 *=========================================================*/		 		private var _signal:ISignal;				/*=========================================================*		 * FUNCTIONS		 *=========================================================*/		public function SignalRelay(signal:ISignal) {			_signal = signal;			initRelay();		}				/**		 * adds the listener to relay dispatched information		 */		public function initRelay():void {			_signal.add(signalDispatched);		}				/**		 * removes the listener to relay dispatched information		 */		public function killRelay():void {			_signal.remove(signalDispatched);		}				/**		 * forward the dispatched information on to listeners of the relay		 *		 * @param - a placeholder argument to allow sending messages with NativeSignals because ...rest isn't counted as an argument		 * @param - a catch for all argument passed to the listener		 */		private function signalDispatched(arg1:* = null, ...rest):void {			rest.unshift(arg1);			this.dispatch.apply(this, rest);		}	}	}