/* * This file is part of the FormManager package. * * @author (c) Tim Shelburne <tim@dontlookstudios.com> * * For the full copyright and license information, please view the LICENSE * file that was distributed with this source code. */package dls.formmanager.form {		import dls.formmanager.form.IFormElement;	import dls.formmanager.form.HiddenElement;		/*	 * A class to group form elements and contextualize their serialized values.	 */	public class Fieldset {				/*=========================================================*		 * PROPERTIES		 *=========================================================*/		 		private var _name:String = "";		public function get name():String {			return _name;		}				private var _elements:Vector.<IFormElement> = new <IFormElement>[];				private var _hiddenElements:Vector.<HiddenElement> = new <HiddenElement>[];				public function get allElements():Vector.<IFormElement> {			return _elements.concat(_hiddenElements);		}				/*=========================================================*		 * FUNCTIONS		 *=========================================================*/		public function Fieldset(aName:String) {			_name = aName;		}				/**		 * add an element		 */		public function addElement(element:IFormElement):void {			if (!elementExists(element.name)) {				_elements.push(element);			}			else {				throw new Error("A form element with the name '" + element.name + "' in fieldset '" + _name + "' already exists.");			}		}				/**		 * add a hidden element		 */		public function addHiddenElement(element:HiddenElement):void {			if (!elementExists(element.name)) {				_hiddenElements.push(element);			}			else {				throw new Error("A form element with the name '" + element.name + "' in fieldset '" + _name + "' already exists.");			}		}				/**		 * update the value of a hidden element		 */		public function updateHiddenElement(name:String, value:*):void {			var elementExists:Boolean = false;			for each (var element:HiddenElement in _hiddenElements) {				if (element.name == name) {					elementExists = true;					element.resetValue(value);					break;				}			}						if (!elementExists) {				addHiddenElement(new HiddenElement(name, value));			}		}				/**		 * empty all hidden elements		 */		public function clearHiddenElements():void {			_hiddenElements = new <HiddenElement>[];		}				/**		 * returns a contextualized object of form values		 */		public function getValuesObject():Object {			var pairs:Object = {};						for each (var element:IFormElement in this.allElements) {				pairs[_name + '['+element.name+']'] = element.value.toString();			}						return pairs;		}				/**		 * returns true if an element with the given name is already in the element list		 */		private function elementExists(name:String):Boolean {			for each (var element:IFormElement in this.allElements) {				if (element.name == name) {					return true;				}			}						return false;		}	}	}