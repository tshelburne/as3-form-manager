/* * This file is part of the FormManager package. * * @author (c) Tim Shelburne <tim@dontlookstudios.com> * * For the full copyright and license information, please view the LICENSE * file that was distributed with this source code. */package dls.formmanager {		import flash.events.MouseEvent;		import org.osflash.signals.ISignal;	import org.osflash.signals.Signal;		import dls.formmanager.IFormManager;	import dls.formmanager.form.IForm;	import dls.formmanager.form.IFormElement;	import dls.formmanager.submitter.IFormSubmitter;	import dls.formmanager.validator.IFormValidator;	import dls.formmanager.validator.errors.IValidationError;		import dls.signals.MultisignalRelay;		/*	 * This manager class abstracts basic form functionality (submission and 	 * validation) from where the form is used.	 */	public class FormManager implements IFormManager {				/*=========================================================*		 * PROPERTIES		 *=========================================================*/		 		private var _forms:Vector.<IForm> = new <IForm>[];				private var _formSubmitters:Vector.<IFormSubmitter>;				private var _formValidator:IFormValidator;				private var _success:MultisignalRelay;		public function get success():ISignal {			return _success;		}				private var _submissionError:MultisignalRelay;		public function get submissionError():ISignal {			return _submissionError;		}				private var _validationError:Signal = new Signal(Vector.<IValidationError>);		public function get validationError():ISignal {			return _validationError;		}				/*=========================================================*		 * FUNCTIONS		 *=========================================================*/		public function FormManager(formSubmitters:Vector.<IFormSubmitter>, formValidator:IFormValidator) {			_formSubmitters = formSubmitters;			_formValidator = formValidator;						_success = new MultisignalRelay();			_submissionError = new MultisignalRelay();			for each (var submitter:IFormSubmitter in _formSubmitters) {				_success.addSignal(submitter.success);				_submissionError.addSignal(submitter.error);			}		}				/**		 * begin managing the form submitted		 */		public function manageForm(form:IForm):void {			if (_forms.indexOf(form) < 0) {				_forms.push(form);				form.submitForm.add( function(e:MouseEvent):void { submitForm(form); } );			}		}				/**		 * cease manageing the form of the given name		 */		public function removeForm(form:IForm):void {			if (_forms.indexOf(form) >= 0) {				_forms.splice(_forms.indexOf(form), 1);				form.submitForm.removeAll();			}		}				/**		 * helper function to check a single element's validity		 */		public function validateElement(element:IFormElement):Vector.<IValidationError> {			return _formValidator.validateElement(element);		}				/**		 * helper function to check a single form's validity		 */		public function validateForm(form:IForm):Vector.<IValidationError> {			return _formValidator.validateForm(form);		}				/**		 * handle submitting and relaying the response for the given form		 */		public function submitForm(form:IForm):void {			var errors:Vector.<IValidationError> = validateForm(form);						if (errors.length == 0) {				for each (var submitter:IFormSubmitter in _formSubmitters) {					if (submitter.canSubmit(form)) {						submitter.submit(form);						break;					}				}			}			else {				_validationError.dispatch(errors);			}		}			}	}