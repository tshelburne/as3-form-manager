/* * This file is part of the FormManager package. * * @author (c) Tim Shelburne <tim@dontlookstudios.com> * * For the full copyright and license information, please view the LICENSE * file that was distributed with this source code. */package dls.formmanager.submitter {		import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.TimerEvent;	import flash.net.URLRequest;	import flash.net.URLVariables;	import flash.utils.Dictionary;	import flash.utils.Timer;		import org.osflash.signals.ISignal;	import org.osflash.signals.Signal;	import org.osflash.signals.natives.NativeSignal;		import dls.debugger.Debug;	import dls.formmanager.form.IForm;	import dls.formmanager.submitter.IFormSubmitter;	import dls.formmanager.submitter.loaders.FormURLLoader;		/*	 * A class to submit and poll for responses relay responses to and from forms.	 */	public class PollingSubmitter implements IFormSubmitter {		/*=========================================================*		 * PROPERTIES		 *=========================================================*/				private var _debugOptions:Object = { "source" : "FormManager (PollingSubmitter)" };				private var _pollUrl:String;				private var _pollFrequency:uint;				// dictionaries of objects keyed off by poll loader		private var _pollTimers:Dictionary = new Dictionary();		private var _pollRequests:Dictionary = new Dictionary();		private var _pollSuccessSignals:Dictionary = new Dictionary();		private var _pollErrorSignals:Dictionary = new Dictionary();				private var _urlLoaders:Vector.<FormURLLoader> = new <FormURLLoader>[];				private var _success:Signal = new Signal();		public function get success():ISignal {			return _success;		}				private var _error:Signal = new Signal();		public function get error():ISignal {			return _error;		}				/*=========================================================*		 * FUNCTIONS		 *=========================================================*/				public function PollingSubmitter(pollUrl:String, pollFrequency:uint) {			_pollUrl = pollUrl;			_pollFrequency = pollFrequency;		}		 		public function canSubmit(form:IForm):Boolean {			return form.submitType == "simple";		}				/**		 * initialize the request and add a loader to the loaders Vector.		 */		public function submit(form:IForm):void {			var data:URLVariables = objectToURLVariables(form.getValuesObject());						var request:URLRequest = new URLRequest();			request.url = form.action;			request.method = form.method;			request.data = data;						Debug.out("Submitting form to " + form.action + "...", Debug.DETAILS, _debugOptions);						var loader:FormURLLoader = new FormURLLoader(form);			_urlLoaders.push(loader);						new NativeSignal(loader, Event.COMPLETE, Event).addOnce(initialResponseReceived);			new NativeSignal(loader, IOErrorEvent.IO_ERROR, IOErrorEvent).addOnce(errorReceived);			loader.load(request);		}				/**		 * initiate polling and clean out the loader.		 */		private function initialResponseReceived(e:Event):void {			Debug.out("Initial response received, polling for job completion...", Debug.DETAILS, _debugOptions);						cleanLoader(e.target as FormURLLoader);						var form:IForm = (e.target as FormURLLoader).relation as IForm;						var loader:FormURLLoader = createPollLoader(form);			_pollRequests[loader] = createPollRequest(form, e.target.data.pollId);			_pollTimers[loader] = new Timer(_pollFrequency);			loader.load(_pollRequests[loader]);		}				/**		 * submit a polling request as the finish of a timer event		 */		private function queryPoll(e:TimerEvent):void {			for (var loader:Object in _pollTimers) {				if (_pollTimers[loader] === e.target) {					(loader as FormURLLoader).load(_pollRequests[loader]);				}			}		}				/**		 * check whether the job has finished; send success message if so, restart request if not		 */		private function pollResponseReceived(e:Event):void {			var loader:FormURLLoader = e.target as FormURLLoader;						var timer:Timer = _pollTimers[loader] as Timer;			timer.stop();			timer.reset();						if (e.target.data.pollCompleted) {				Debug.out("Polling completed...", Debug.DETAILS, _debugOptions);				_success.dispatch(loader.relation, loader.data.pollData);				cleanLoader(loader);			}			else {				Debug.out("Polling again...", Debug.DEBUG, _debugOptions);				timer.start();				new NativeSignal(timer, TimerEvent.TIMER, TimerEvent).addOnce(queryPoll);			}		}				/**		 * dispatch an error signal and clean out the loader		 */		private function errorReceived(e:IOErrorEvent):void {			Debug.out("Polling error received...", Debug.DETAILS, _debugOptions);			_error.dispatch(e.target.relation, e.toString());			cleanLoader(e.target as FormURLLoader);		}				/**		 * create a url request to be used in polling		 */		private function createPollRequest(form:IForm, pollId:String):URLRequest {			var data:URLVariables = new URLVariables();			data.pollId = pollId;						var request:URLRequest = new URLRequest();			request.url = _pollUrl;			request.method = "POST";			request.data = data;						return request;		}				/**		 * create a url loader to be used in polling		 */		private function createPollLoader(form:IForm):FormURLLoader {			var loader:FormURLLoader = new FormURLLoader(form);			_urlLoaders.push(loader);						_pollSuccessSignals[loader] = new NativeSignal(loader, Event.COMPLETE, Event).add(pollResponseReceived);			_pollErrorSignals[loader] = new NativeSignal(loader, IOErrorEvent.IO_ERROR, IOErrorEvent).add(errorReceived);						return loader;		}				/**		 * remove the given loader from the list of loaders, and destroy any dependencies on it		 */		private function cleanLoader(loader:FormURLLoader):void {			_urlLoaders.splice(_urlLoaders.indexOf(loader), 1);						if (isPollingLoader(loader)) {				delete _pollTimers[loader];								delete _pollRequests[loader];								(_pollSuccessSignals[loader] as NativeSignal).removeAll();				delete _pollSuccessSignals[loader];								(_pollErrorSignals[loader] as NativeSignal).removeAll();				delete _pollErrorSignals[loader];			}		}				/**		 * checks whether or not a loader is a loader responsible for polling		 */		private function isPollingLoader(loader:FormURLLoader):Boolean {			return _pollTimers[loader] != null;		}				/**		 * convenience function to convert a plain object to URLVariables		 *		 * @author - Riccardo <http://www.rblab.com/blog/2009/04/as3-snippet-object-to-urlvariables/>		 */		private function objectToURLVariables(parameters:Object):URLVariables {			var paramsToSend:URLVariables = new URLVariables();			for (var i:String in parameters) {				if (i != null) {					if (parameters[i] is Array) {						paramsToSend[i] = parameters[i];					}					else {						paramsToSend[i] = parameters[i].toString();					}				}			}			return paramsToSend;		}	}	}